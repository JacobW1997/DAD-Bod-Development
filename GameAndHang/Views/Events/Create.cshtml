@model GameAndHang.Models.Event

@{
    ViewBag.Title = "Create";
}

    <body onload="initMap()">

        <h2>Create an Event</h2>
        <div class="container">
            <div class="row">
                <div class="col-md-7">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            * Event Name:
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.EventName, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.EventName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            Select if event is public:
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.IsPublic)
                                    @Html.ValidationMessageFor(model => model.IsPublic, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            *@Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            * Event Description
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.EventDescription, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.EventDescription, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            * Location
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.EventLocation, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.EventLocation, "", new { @class = "text-danger" })
                               
                            </div>
                        </div>

                        <div class="form-group">
                            * Min Players
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.PlayerSlotsMin, new { htmlAttributes = new { @class = "form-control" }  }) 
                                @Html.ValidationMessageFor(model => model.PlayerSlotsMin, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            * Max Players
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.PlayerSlotsMax, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.PlayerSlotsMax, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            *@Html.LabelFor(model => model.UnsupGames, "Notes", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.UnsupGames, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.UnsupGames, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.ValidationMessageFor(m => m.HostID)
                        </div>

                        <div>
                            @Html.HiddenFor(model => model.EventLat, new { id = "eventlat" })
                        </div>
                        <div>
                            @Html.HiddenFor(model => model.EventLong, new { id = "eventlong" })
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Create" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
                    }
                </div>
                <div class="col-md-5">
                    <h4>Please enter the event's address below to see it on the map.</h4>
                    <p>This will allow you to double check that your Event Address entry is in the correct
                    format and links to the correct location.</p>
                    <div id="map" style="width: 520px; height: 480px; padding: 10px; color: black;"></div>
                    <br/>
                    <div>
                        <input id="address" type="text" value="Salem, OR">
                        <input type="button" value="Submit" onclick="codeAddress()">
                    </div>
                </div>
            </div>
        </div>
        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>

    </body>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script src="~/Scripts/API Scripts/EventCreationMap.js"></script>

<script async defer
        src=@ViewBag.ApiUrl>
 </script>
